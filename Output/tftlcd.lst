C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TFTLCD
OBJECT MODULE PLACED IN .\output\tftlcd.obj
COMPILER INVOKED BY: D:\2filerj\keil5ForC51\C51\BIN\C51.EXE APP\tftlcd\tftlcd.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\
                    -User;.\Public;.\GUI;.\APP\tftlcd;.\APP\touch) DEBUG OBJECTEXTEND PRINT(.\output\tftlcd.lst) TABS(2) OBJECT(.\output\tftl
                    -cd.obj)

line level    source

   1          //没被使用的函数会有一个警告，所以注释掉了一些用不到的函数
   2          #include "tftlcd.h"
   3          #include "font.h" 
   4          #include "uart.h"
   5          #include "stdlib.h"
   6          
   7          
   8          
   9          //LCD的画笔颜色和背景色    
  10          u16 FRONT_COLOR=WHITE;  //画笔颜色
  11          u16 BACK_COLOR=BLACK;  //背景色 
  12          
  13          _tftlcd_data tftlcd_data; 
  14          
  15          void Delay(unsigned int dly)
  16          {
  17   1          unsigned int i,j;
  18   1      
  19   1          for(i=0;i<dly;i++)
  20   1            for(j=0;j<255;j++);
  21   1      }
  22          //写寄存器函数
  23          //cmd:寄存器值
  24          void LCD_WriteCmd(u16 cmd)
  25          {
  26   1      #ifdef TFT20_HX8309
                unsigned char cmdH, cmdL;
                cmdH = cmd >> 8;
                cmdL = cmd & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 0;       //选择命令
                  
                TFT_DATAPORTH = cmdH; //放置命令数据
                TFT_DATAPORTL = cmdL; //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
  45   1      
  46   1      #ifdef TFT22_R61503B
  47   1        unsigned char cmdH, cmdL;
  48   1        cmdH = cmd >> 8;
  49   1        cmdL = cmd & 0x00FF;
  50   1        
  51   1        
  52   1        TFT_WR = 1;       //初始化WR
  53   1        TFT_CS = 0;       //打开片选
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 2   

  54   1        
  55   1        TFT_RD = 1;           //选择写
  56   1        TFT_RS = 0;       //选择命令
  57   1        
  58   1        
  59   1        TFT_DATAPORTH = cmdH; //放置命令数据
  60   1        TFT_WR = 0;       //写入时序
  61   1        
  62   1        TFT_WR = 1;
  63   1        TFT_DATAPORTH = cmdL;
  64   1        TFT_WR = 0;       //写入时序
  65   1        TFT_WR = 1;
  66   1        
  67   1        TFT_CS = 1;       //关闭片选 
  68   1      #endif
  69   1      
  70   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=0;
              
                TFT_DATAPORTH=cmd>>8;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_DATAPORTH=cmd&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1;
              #endif
  86   1      
  87   1      #ifdef TFT24_ST7781R  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
  96   1      
  97   1      #ifdef TFT26_R61509V  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
 106   1      
 107   1      #ifdef TFT26_ILI9325D 
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 3   

 116   1      }
 117          
 118          //写数据
 119          //dat:要写入的值
 120          void LCD_WriteData(u16 dat)
 121          {
 122   1      #ifdef TFT20_HX8309
                unsigned char datH, datL;
                datH = dat >> 8;
                datL = dat & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 1;       //选择发送数据
                  
                TFT_DATAPORTH = datH;  //放置命令数据
                TFT_DATAPORTL = datL;  //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
 141   1      
 142   1      #ifdef TFT22_R61503B
 143   1        unsigned char datH, datL;
 144   1        datH = dat >> 8;
 145   1        datL = dat & 0xFF;
 146   1        
 147   1        TFT_WR = 1;       //初始化WR
 148   1        TFT_CS = 0;       //打开片选
 149   1          
 150   1        TFT_RD = 1;           //选择写
 151   1        TFT_RS = 1;       //选择发送数据
 152   1        
 153   1      
 154   1        TFT_DATAPORTH = datH;  //放置命令数据
 155   1        TFT_WR = 0;       //写入时序
 156   1        TFT_WR = 1;
 157   1      
 158   1        TFT_DATAPORTH = datL; 
 159   1      
 160   1        TFT_WR = 0;       //写入时序
 161   1        TFT_WR = 1;
 162   1        
 163   1         TFT_CS = 1;        //关闭片选
 164   1      #endif
 165   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=dat>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=dat&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 4   

                TFT_CS=1; 
              #endif
 180   1      
 181   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 190   1      
 191   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 200   1      
 201   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 210   1      }
 211          
 212          void LCD_WriteData_Color(u16 color)
 213          {
 214   1      #ifdef TFT20_HX8309
                unsigned char datH, datL;
                datH = color >> 8;
                datL = color & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 1;       //选择发送数据
                  
                TFT_DATAPORTH = datH;  //放置命令数据
                TFT_DATAPORTL = datL;  //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
 233   1      
 234   1      #ifdef TFT22_R61503B
 235   1         unsigned char datH, datL;
 236   1        datH = color >> 8;
 237   1        datL = color & 0xFF;
 238   1        
 239   1        TFT_WR = 1;       //初始化WR
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 5   

 240   1        TFT_CS = 0;       //打开片选
 241   1          
 242   1        TFT_RD = 1;           //选择写
 243   1        TFT_RS = 1;       //选择发送数据
 244   1        
 245   1      
 246   1        TFT_DATAPORTH = datH;  //放置命令数据
 247   1        TFT_WR = 0;       //写入时序
 248   1        TFT_WR = 1;
 249   1      
 250   1        TFT_DATAPORTH = datL; 
 251   1      
 252   1        TFT_WR = 0;       //写入时序
 253   1        TFT_WR = 1;
 254   1        
 255   1         TFT_CS = 1;        //关闭片选
 256   1      #endif
 257   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=color>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=color&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1; 
              #endif
 272   1      
 273   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 282   1      
 283   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 292   1      
 293   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 6   

 302   1      }
 303          
 304          void LCD_WriteCmdData(u16 cmd,u16 dat)
 305          {
 306   1        LCD_WriteCmd(cmd);
 307   1        LCD_WriteData(dat);
 308   1      }
 309          
 310          //读数据
 311          //返回值:读到的值
 312          u16 LCD_ReadData(void)
 313          {
 314   1        u16 ram;
 315   1      
 316   1        TFT_DATAPORTH=0xff;
 317   1        TFT_DATAPORTL=0xff;
 318   1      
 319   1      #ifdef TFT20_HX8309
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 330   1      
 331   1      #ifdef TFT22_R61503B
 332   1        
 333   1        TFT_CS=0;
 334   1        TFT_RS=1;
 335   1        TFT_RD=0;
 336   1        _nop_();
 337   1        ram=TFT_DATAPORTH;
 338   1        ram<<=8;  
 339   1      
 340   1        TFT_RD=1; 
 341   1        TFT_RD=0;
 342   1        _nop_();
 343   1        ram|=TFT_DATAPORTH;
 344   1        TFT_RD=1;
 345   1        TFT_CS=1;
 346   1      #endif
 347   1      
 348   1      #ifdef TFT22_ILI9225B
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;  
              
                TFT_RD=1; 
                TFT_RD=0;
                _nop_();
                ram|=TFT_DATAPORTH;
                TFT_RD=1;
                TFT_CS=1;
              #endif
 363   1      
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 7   

 364   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;  
                TFT_RD=1;
                TFT_CS=1;
              #endif
 375   1      
 376   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 387   1      
 388   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 399   1      
 400   1        return ram; 
 401   1      }
 402          
 403          //设置LCD显示方向
 404          //dir:0,竖屏；1,横屏
 405          void LCD_Display_Dir(u8 dir)
 406          {
 407   1        tftlcd_data.dir=dir;
 408   1        if(dir==0)  //默认竖屏方向
 409   1        {
 410   2      #ifdef TFT20_HX8309
                  LCD_WriteCmdData(0x0001,0x011b); //Output Direct
              #endif
 413   2      #ifdef TFT22_R61503B
 414   2          LCD_WriteCmdData(0x0001,0x0500); //Output Direct
 415   2          LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
 416   2      #endif
 417   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 421   2      
 422   2      #ifdef TFT24_ST7781R    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5030);
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 8   

              #endif
 427   2      
 428   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 432   2      
 433   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 437   2      
 438   2          tftlcd_data.height=HEIGHT;
 439   2          tftlcd_data.width=WIDTH;    
 440   2        }
 441   1        else
 442   1        {
 443   2      #ifdef TFT20_HX8309
                    LCD_WriteCmdData(0x0001, 0x001b); //Output Direct
              #endif
 446   2      
 447   2      #ifdef TFT22_R61503B
 448   2            LCD_WriteCmdData(0x0001, 0x0400); //Output Direct
 449   2          LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
 450   2      #endif
 451   2      
 452   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
 456   2      
 457   2      #ifdef TFT24_ST7781R
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct   
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5038);
              #endif
 462   2      
 463   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 467   2      
 468   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 472   2      
 473   2            tftlcd_data.height=WIDTH;
 474   2          tftlcd_data.width=HEIGHT;
 475   2        }
 476   1      }
 477          
 478          
 479          void TFTLCD_Init(void)
 480          {
 481   1        u16 i=0;
 482   1        TFT_RST=1;  
 483   1        delay_ms(100);
 484   1        
 485   1        TFT_RST=0;
 486   1        delay_ms(100);
 487   1      
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 9   

 488   1        TFT_RST=1;
 489   1        delay_ms(100);
 490   1      
 491   1      #ifdef TFT20_HX8309
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData(); 
              #endif
 495   1      
 496   1      #ifdef TFT22_R61503B
 497   1        LCD_WriteCmd(0X0000);         
 498   1        tftlcd_data.id=LCD_ReadData(); 
 499   1      #endif  
 500   1        #ifdef TFT22_ILI9225B 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 504   1      
 505   1      #ifdef TFT24_ST7781R  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 509   1      
 510   1      #ifdef TFT26_R61509V  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 514   1      
 515   1      #ifdef TFT26_ILI9325D 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 519   1      
 520   1        //printf(" LCD ID:%x\r\n",tftlcd_data.id); //打印LCD ID
 521   1        
 522   1      #ifdef TFT20_HX8309
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0000);        
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0001); 
                LCD_WriteCmd(0x0013);LCD_WriteData(0x141c); 
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0018);
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0044);
                for(i=5000; i>0; i--);
                //LCD_WriteCmd(0x0011);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0040);        
                //LCD_WriteCmd(0x0012);LCD_WriteData(0x0013);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x3413);    
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
                LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);
                LCD_WriteCmd(0x000b);LCD_WriteData(0x0000);
                //  LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0023);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0024);LCD_WriteData(0x0000);
                
                LCD_WriteCmd(0x0030);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0031);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0032);LCD_WriteData(0x0007);
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 10  

                LCD_WriteCmd(0x0033);LCD_WriteData(0x0007);
                LCD_WriteCmd(0x0034);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0035);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0036);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0037);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0038);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0039);LCD_WriteData(0x0);
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x011b); 
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
                LCD_WriteCmd(0x0003);LCD_WriteData(0x6030);
                LCD_WriteCmd(0x0004);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0005);LCD_WriteData(0x0000);
                
                LCD_WriteCmd(0x0040);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0041);LCD_WriteData(0x00af);
                
                LCD_WriteCmd(0x0042);LCD_WriteData(0xdb00);
                LCD_WriteCmd(0x0043);LCD_WriteData(0xdb00);
                LCD_WriteCmd(0x0044);LCD_WriteData(0xaf00);
                LCD_WriteCmd(0x0045);LCD_WriteData(0xdb00);
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x4040);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0005);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0025);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0027);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0037);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0022);
              #endif
 583   1      
 584   1      #ifdef TFT22_R61503B
 585   1        
 586   1          LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
 587   1        delay_10us(10);
 588   1        LCD_WriteCmd(0x0007);LCD_WriteCmd(0x0000);
 589   1        LCD_WriteCmd(0x0012);LCD_WriteCmd(0x0000);
 590   1        LCD_WriteCmd(0x00a4);LCD_WriteCmd(0x0001);
 591   1        delay_10us(10);
 592   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x9b00);
 593   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0031);
 594   1        LCD_WriteCmd(0x0018);LCD_WriteData(0x0001);
 595   1        
 596   1        LCD_WriteCmd(0x0010);LCD_WriteData(0x11b0); 
 597   1        LCD_WriteCmd(0x0011);LCD_WriteData(0x0007);        
 598   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x1017);  
 599   1        LCD_WriteCmd(0x0013);LCD_WriteData(0x850d); 
 600   1        LCD_WriteCmd(0x0014);LCD_WriteData(0x8000); 
 601   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x103c);  
 602   1        Delay(150);
 603   1        
 604   1        
 605   1        LCD_WriteCmd(0x0001);LCD_WriteData(0x0500);
 606   1        LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
 607   1        LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);
 608   1        
 609   1        LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
 610   1        LCD_WriteCmd(0x000b);LCD_WriteData(0x1100);
 611   1        LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 11  

 612   1        LCD_WriteCmd(0x000f);LCD_WriteData(0x1401);
 613   1        
 614   1        LCD_WriteCmd(0x0015);LCD_WriteData(0x0000);
 615   1        LCD_WriteCmd(0x0020);LCD_WriteData(0x0000);
 616   1        LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
 617   1      
 618   1      //  LCD_WriteCmd(0x0030);LCD_WriteData(0x0f0f);
 619   1      //  LCD_WriteCmd(0x0031);LCD_WriteData(0x0a0b);
 620   1      //  LCD_WriteCmd(0x0032);LCD_WriteData(0x0c0e);
 621   1      //  LCD_WriteCmd(0x0033);LCD_WriteData(0x0d0d);
 622   1      //  LCD_WriteCmd(0x0034);LCD_WriteData(0x0a0a);
 623   1      //  LCD_WriteCmd(0x0035);LCD_WriteData(0x0909);
 624   1      //  LCD_WriteCmd(0x0036);LCD_WriteData(0x0c0c);
 625   1      //  LCD_WriteCmd(0x0037);LCD_WriteData(0x0f0c);
 626   1      //  LCD_WriteCmd(0x0038);LCD_WriteData(0x0606);
 627   1      //  LCD_WriteCmd(0x0039);LCD_WriteData(0x0606);
 628   1      
 629   1        LCD_WriteCmd(0x0050);LCD_WriteData(0x0000);
 630   1        LCD_WriteCmd(0x0051);LCD_WriteData(0x00af);
 631   1        LCD_WriteCmd(0x0052);LCD_WriteData(0x0000);
 632   1        LCD_WriteCmd(0x0053);LCD_WriteData(0x00db);
 633   1        
 634   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x1b00);
 635   1        LCD_WriteCmd(0x0071);LCD_WriteData(0x0000);
 636   1        
 637   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0000);
 638   1        LCD_WriteCmd(0x0091);LCD_WriteData(0x0100);
 639   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0001);
 640   1        LCD_WriteCmd(0x0059);LCD_WriteData(0x050c);
 641   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0010);
 642   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0600);
 643   1      
 644   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0233);
 645   1        Delay(50);
 646   1      //  LCD_WriteCmd(0x0007);LCD_WriteData(0x0133);
 647   1      //  Delay(50);
 648   1      
 649   1        LCD_WriteCmd(0x0022);
 650   1      #endif  
 651   1      
 652   1         
 653   1      #ifdef TFT22_ILI9225B
                LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
             -16Bit
                LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                //*************Power On sequence ****************//
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                //------------- Set GRAM area ------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x00DB);
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 12  

                LCD_WriteCmdData(0x0032, 0x0000);
                LCD_WriteCmdData(0x0033, 0x0000);
                LCD_WriteCmdData(0x0034, 0x00DB);
                LCD_WriteCmdData(0x0035, 0x0000);
                LCD_WriteCmdData(0x0036, 0x00AF);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x00DB);
                LCD_WriteCmdData(0x0039, 0x0000);
                
                // ----------- Adjust the Gamma Curve ----------//
                LCD_WriteCmdData(0x0050, 0x0000);
                LCD_WriteCmdData(0x0051, 0x0704);
                LCD_WriteCmdData(0x0052, 0x0C08);
                LCD_WriteCmdData(0x0053, 0x0502);
                LCD_WriteCmdData(0x0054, 0x080C);
                LCD_WriteCmdData(0x0055, 0x0407);
                LCD_WriteCmdData(0x0056, 0x0000);
                LCD_WriteCmdData(0x0057, 0x0205);
                LCD_WriteCmdData(0x0058, 0x0000);
                LCD_WriteCmdData(0x0059, 0x0000);
                
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0007, 0x1017);
              
              #endif
 698   1      
 699   1      #ifdef TFT24_ST7781R
                //ST7781R_HSD2.4
                //------------------------------------Display Control Setting--------------------------------------------
             ---//
                LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                LCD_WriteCmdData(0x0002, 0x0700); //Line Inversion
                LCD_WriteCmdData(0x0003, 0x5030); //Entry Mode (262K, BGR)
                LCD_WriteCmdData(0x0004, 0x0000); //Resize Control
                LCD_WriteCmdData(0x0008, 0x0302); //Display Control2 (Porch Setting)
                LCD_WriteCmdData(0x0009, 0x0000); //Display Control3
                LCD_WriteCmdData(0x000A, 0x0000); //Display Control4
                LCD_WriteCmdData(0x000C, 0x0000); // RGB Display Interface Control1
                LCD_WriteCmdData(0x000D, 0x0000); //Frame Marker Position
                LCD_WriteCmdData(0x000F, 0x0000); // RGB Display Interface Control2
                //-----------------------------------End Display Control setting-----------------------------------------
             -//
                delay_ms(100);
                //-------------------------------- Power Control Registers Initial --------------------------------------
             -//
                LCD_WriteCmdData(0x0010, 0x10E0); //Power Control1
                //---------------------------------End Power Control Registers Initial -------------------------------//
                delay_ms(100); //Delay 100ms
                //-------------------------------------Gamma Cluster Setting-------------------------------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x0406);
                LCD_WriteCmdData(0x0032, 0x0302);
                LCD_WriteCmdData(0x0035, 0x0006);
                LCD_WriteCmdData(0x0036, 0x0700);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x0406);
                LCD_WriteCmdData(0x0039, 0x0302);
                LCD_WriteCmdData(0x003c, 0x0006);
                LCD_WriteCmdData(0x003d, 0x0700);
                //---------------------------------------End Gamma Setting---------------------------------------------//
                //----------------------------------Display Windows 240 X 320----------------------------------------//
                LCD_WriteCmdData(0x0020, 0x0000); // Horizontal Address Start Position
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 13  

                LCD_WriteCmdData(0x0021, 0x0000); // Vertical Address Start Position
                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal Address Start Position
                LCD_WriteCmdData(0x0051, 0x00ef); // Horizontal Address End Position
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical Address Start Position
                LCD_WriteCmdData(0x0053, 0x013f); // Vertical Address End Position
                //----------------------------------End Display Windows 240 X 320----------------------------------//
                //-------------------------------------------Frame Rate Setting------------------------------------------
             --//
                LCD_WriteCmdData(0x0060, 0xA700); //Gate scan control
                LCD_WriteCmdData(0x0061, 0x0001); //Non-display Area setting
                LCD_WriteCmdData(0x006A, 0x0000); //Vertical Scroll Control
                LCD_WriteCmdData(0x0090, 0x0030); //RTNI setting
                LCD_WriteCmdData(0x0095, 0x021E); //Panel Interface Control 4
                //-------------------------------------------END Frame Rate setting------------------------------------//
                //----------------------------------Partial Image Display Initial----------------------------------------
             -//
                LCD_WriteCmdData(0x0080, 0x0000); // Partial Image 1 Display Position
                LCD_WriteCmdData(0x0081, 0x0000); // Partial Image 1 Area (Start Line)
                LCD_WriteCmdData(0x0082, 0x0000); // Partial Image 1 Area (End Line)
                LCD_WriteCmdData(0x0083, 0x0000); // Partial Image 2 Display Position
                LCD_WriteCmdData(0x0084, 0x0000); // Partial Image 2 Area (Start Line)
                LCD_WriteCmdData(0x0085, 0x0000); // Partial Image 2 Area (End Line)
                //-----------------------------------END Partial Image Display Initial ----------------------------------
             -//
                //--------------------------------- Power Supply Startup 1 Setting------------------------------------//
                LCD_WriteCmdData(0x00FF, 0x0001); //CMD 2 Enable
                LCD_WriteCmdData(0x00B0, 0x310E); //Power Control2
                LCD_WriteCmdData(0x00FF, 0x0000); // CMD 2 Disable
                //--------------------------------- End Power Supply Startup 2 Setting------------------------------//
                delay_ms(100); //Delay 100ms
                LCD_WriteCmdData(0x0007, 0x0133); //Display Control1
                delay_ms(50); //Delay 50ms
                
                LCD_WriteCmd(0x0022);
              #endif
 764   1      
 765   1      #ifdef TFT26_R61509V
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                delay_ms(100);
                
                LCD_WriteCmd(0x0400);LCD_WriteData(0x6200); 
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808); 
                 
                LCD_WriteCmd(0x0300);LCD_WriteData(0x0C00);  
                LCD_WriteCmd(0x0301);LCD_WriteData(0x5A0B);  
                LCD_WriteCmd(0x0302);LCD_WriteData(0x0906); 
                LCD_WriteCmd(0x0303);LCD_WriteData(0x1017);  
                LCD_WriteCmd(0x0304);LCD_WriteData(0x2300);  
                LCD_WriteCmd(0x0305);LCD_WriteData(0x1700);  
                LCD_WriteCmd(0x0306);LCD_WriteData(0x6309); 
                LCD_WriteCmd(0x0307);LCD_WriteData(0x0C09); 
                LCD_WriteCmd(0x0308);LCD_WriteData(0x010C);  
                LCD_WriteCmd(0x0309);LCD_WriteData(0x2232); 
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0016);  
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0101);  
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x0001); 
                 
                LCD_WriteCmd(0x0100);LCD_WriteData(0x0330);  
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 14  

                LCD_WriteCmd(0x0101);LCD_WriteData(0x0336);  
                LCD_WriteCmd(0x0103);LCD_WriteData(0x1000); 
                 
                LCD_WriteCmd(0x0280);LCD_WriteData(0x6100); 
                LCD_WriteCmd(0x0102);LCD_WriteData(0xBBB4); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);  
                LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x000C);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0090);LCD_WriteData(0x0800); 
                LCD_WriteCmd(0x000F);LCD_WriteData(0x0000); 
                
                LCD_WriteCmd(0x0210);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0211);LCD_WriteData(0x00EF); 
                LCD_WriteCmd(0x0212);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0213);LCD_WriteData(0x018F);         //;400
                
                
                LCD_WriteCmd(0x0500);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0501);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0502);LCD_WriteData(0x005F);  
                
                LCD_WriteCmd(0x0401);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x0404);LCD_WriteData(0x0000); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0100); 
                delay_ms(100);
                  
                LCD_WriteCmd(0x0202);
              #endif
 825   1      
 826   1      #ifdef TFT26_ILI9325D
                //************* Start Initial Sequence **********// 
                LCD_WriteCmdData(0x0001, 0x0100); // set SS  and SM bit 
                LCD_WriteCmdData(0x0002, 0x0200); // set 1 line inversion 
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1. 
                LCD_WriteCmdData(0x0004, 0x0000); // Resize register 
                LCD_WriteCmdData(0x0008, 0x0202); // set theback porch and front porch 
                LCD_WriteCmdData(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0] 
                LCD_WriteCmdData(0x000A, 0x0000); // FMARK function 
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting 
                LCD_WriteCmdData(0x000D, 0x0000); // Frame marker Position 
                LCD_WriteCmdData(0x000F, 0x0000); // RGB int erface polarity 
                //*************Power On sequence **************** // 
                LCD_WriteCmdData(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0007); // DC1[2:0 ], DC0[2:0], VC[2:0] 
                LCD_WriteCmdData(0x0012, 0x0000); // VREG1OUT voltage 
                LCD_WriteCmdData(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
                delay_ms(10);                         // Dis-charge capacitor power voltage 
                LCD_WriteCmdData(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0227); // R11h=0x 0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0] 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0012, 0x008D); // External reference voltage= Vci; 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0013, 0x1200); // VDV[4:0] for VCOM amplitude 
                LCD_WriteCmdData(0x0029, 0x0005); // VCM[5:0] for VCOMH 
                LCD_WriteCmdData(0x002B, 0x000C); // Frame Rate = 91Hz 
                delay_ms(10);                          // Delay 50ms 
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 15  

                LCD_WriteCmdData(0x0020, 0x0000); // GRAM horizontal Address 
                LCD_WriteCmdData(0x0021, 0x0000); // GRAM Vertical Address 
                // ----------- Adjust the Gamma Curve ----------// 
                //a-Si TFT LCD Single Chip Driver 
                //240RGBx320 Resolution and 262K color  ILI9325D
                //The information contained herein is the exclusive property of ILI Technology Corp. and shall not be dis
             -tributed, reproduced, or disclosed in 
                //whole or in part without prior written permission of ILI Technology Corp.
                //Page 24 of 26  V0.14
                LCD_WriteCmdData(0x0030, 0x0000); 
                LCD_WriteCmdData(0x0031, 0x0303); 
                LCD_WriteCmdData(0x0032, 0x0103); 
                LCD_WriteCmdData(0x0035, 0x0103); 
                LCD_WriteCmdData(0x0036, 0x0004); 
                LCD_WriteCmdData(0x0037, 0x0406); 
                LCD_WriteCmdData(0x0038, 0x0404); 
                LCD_WriteCmdData(0x0039, 0x0707); 
                LCD_WriteCmdData(0x003C, 0x0301); 
                LCD_WriteCmdData(0x003D, 0x0004); 
                //------------------ Set GRAM area ---------------// 
                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal GRAM Start Address 
                LCD_WriteCmdData(0x0051, 0x00EF); // Horizontal GRAM End Address 
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0053, 0x013F); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0060, 0xA700); // Gate Sc an Line 
                LCD_WriteCmdData(0x0061, 0x0001); // NDL,VLE, REV 
                LCD_WriteCmdData(0x006A, 0x0000); // set scrolling line 
                //-------------- Partial Display Control ---------// 
                LCD_WriteCmdData(0x0080, 0x0000); 
                LCD_WriteCmdData(0x0081, 0x0000); 
                LCD_WriteCmdData(0x0082, 0x0000); 
                LCD_WriteCmdData(0x0083, 0x0000); 
                LCD_WriteCmdData(0x0084, 0x0000); 
                LCD_WriteCmdData(0x0085, 0x0000); 
                //-------------- Panel Control -------------------// 
                LCD_WriteCmdData(0x0090, 0x0010); 
                LCD_WriteCmdData(0x0092, 0x0600); 
                LCD_WriteCmdData(0x0007, 0x0133); // 262K color and display ON 
                
                LCD_WriteCmd(0x0022);
              #endif
 893   1      
 894   1        LCD_Display_Dir(TFTLCD_DIR);    //0：竖屏  1：横屏  默认竖屏
 895   1        LCD_Clear(BACK_COLOR);
 896   1      }
 897          
 898          //设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
 899          //sx,sy:窗口起始坐标(左上角)
 900          //width,height:窗口宽度和高度,必须大于0!!
 901          //窗体大小:width*height. 
 902          void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
 903          {
 904   1      #ifdef TFT20_HX8309
                u16 x,y,xy;
                x=(width<<8)|sx;
                y=(height<<8)|sy;
                xy = (sy<<8)|sx;
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmd(0x44);LCD_WriteData(x);
                  LCD_WriteCmd(0x45);LCD_WriteData(y);
                  LCD_WriteCmd(0x21);LCD_WriteData(xy); 
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 16  

                }
                else
                {
                  xy = (sx<<8)|sy;
                  LCD_WriteCmd(0x45);LCD_WriteData(x);
                  LCD_WriteCmd(0x44);LCD_WriteData(y);
                  LCD_WriteCmd(0x21);LCD_WriteData(xy);
                }
                LCD_WriteCmd(0x22);
              #endif
 924   1      
 925   1      #ifdef TFT22_R61503B
 926   1        if(tftlcd_data.dir==0)  
 927   1        {
 928   2          LCD_WriteCmd(0x0050);
 929   2          LCD_WriteData(sx);       
 930   2          LCD_WriteCmd(0x0051);
 931   2          LCD_WriteData(width);  
 932   2          LCD_WriteCmd(0x0052);
 933   2          LCD_WriteData(sy);
 934   2          LCD_WriteCmd(0x0053);
 935   2          LCD_WriteData(height);
 936   2      
 937   2          LCD_WriteCmd(0x0020);
 938   2          LCD_WriteData(sx);
 939   2          LCD_WriteCmd(0x0021);
 940   2          LCD_WriteData(sy);
 941   2      
 942   2          LCD_WriteCmd(0x0022);
 943   2        
 944   2        }
 945   1        else
 946   1        {
 947   2          LCD_WriteCmd(0x0052);
 948   2          LCD_WriteData(sx);       
 949   2          LCD_WriteCmd(0x0053);
 950   2          LCD_WriteData(width);  
 951   2          LCD_WriteCmd(0x0050);
 952   2          LCD_WriteData(sy);
 953   2          LCD_WriteCmd(0x0051);
 954   2          LCD_WriteData(height);
 955   2      
 956   2          LCD_WriteCmd(0x0021);
 957   2          LCD_WriteData(sx);
 958   2          LCD_WriteCmd(0x0020);
 959   2          LCD_WriteData(sy);
 960   2      
 961   2          LCD_WriteCmd(0x0022);
 962   2        }
 963   1      #endif
 964   1        
 965   1      #ifdef TFT22_ILI9225B
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0037, sx);
                  LCD_WriteCmdData(0x0036, width); 
                  LCD_WriteCmdData(0x0039, sy);
                  LCD_WriteCmdData(0x0038, height);
                
                  LCD_WriteCmdData(0x0020, sx);
                  LCD_WriteCmdData(0x0021, sy);
                
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 17  

                  LCD_WriteCmd(0x0022);
                }
                else
                {
                  LCD_WriteCmdData(0x0039, sx);
                  LCD_WriteCmdData(0x0038, width); 
                  LCD_WriteCmdData(0x0037, sy);
                  LCD_WriteCmdData(0x0036, height);
                
                  LCD_WriteCmdData(0x0021, sx);
                  LCD_WriteCmdData(0x0020, sy);
                
                  LCD_WriteCmd(0x0022);
                }
              #endif
 991   1      
 992   1      #ifdef TFT24_ST7781R
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0051, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0052, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0053, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0020, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0021, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022);   
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0053, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0050, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0051, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0021, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0020, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022); 
                } 
              #endif
1016   1      
1017   1      #ifdef TFT26_R61509V
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0200);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sy);
                
                  LCD_WriteCmd(0x0202);
                }
                else
                {
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sx);
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 18  

                  LCD_WriteCmd(0x0200);   LCD_WriteData(sy);
                
                  LCD_WriteCmd(0x0202);
                }
              #endif
1043   1      
1044   1      #ifdef TFT26_ILI9325D
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0051, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0052, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0053, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0020, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0021, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0053, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0050, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0051, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0021, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0020, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
              #endif
1068   1      
1069   1      }
1070          
1071          //读取个某点的颜色值   
1072          //x,y:坐标
1073          //返回值:此点的颜色
1074          /*u16 LCD_ReadPoint(u16 x,u16 y)
1075          {
1076           u16 r=0,g=0x0001,b=0x0001,dat;
1077            if(x>=tftlcd_data.width||y>=tftlcd_data.height)return 0;  //超过了范围,直接返回        
1078            LCD_Set_Window(x, y, x, y);
1079            
1080          #ifdef TFT22_R61503B
1081            
1082          
1083            //LCD_Set_Window(x, y, x, y);
1084            dat=LCD_ReadData();     //dummy Read
1085            dat=LCD_ReadData();
1086          
1087              
1088            b=dat>>11;         
1089            g=(dat>>5)&0x003f;
1090            r=dat&0x001f;
1091            dat=(r<<11)|(g<<5)|(b); 
1092                             
1093            r=dat;
1094                           
1095            
1096          #endif
1097          
1098          #ifdef TFT22_ILI9225B 
1099            LCD_WriteCmd(0X0022);                      
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 19  

1100            r=LCD_ReadData();     //dummy Read
1101            r=LCD_ReadData();     //dummy Read
1102            r=LCD_ReadData();     //实际坐标颜色
1103          #endif
1104          
1105          #ifdef TFT24_ST7781R  
1106            LCD_WriteCmd(0X0022);
1107            r=LCD_ReadData();     //dummy Read                         
1108            r=LCD_ReadData();     //实际坐标颜色
1109          #endif
1110          
1111          #ifdef TFT26_R61509V  
1112            LCD_WriteCmd(0X0202);                      
1113            r=LCD_ReadData();     //dummy Read
1114            r=LCD_ReadData();     //dummy Read
1115            r=LCD_ReadData();     //实际坐标颜色
1116          #endif
1117            
1118          #ifdef TFT26_ILI9325D 
1119            LCD_WriteCmd(0X0022);
1120            r=LCD_ReadData();     //dummy Read                         
1121            r=LCD_ReadData();     //实际坐标颜色
1122          #endif  
1123          
1124            return r;
1125          }*/
1126          
1127          //清屏函数
1128          //color:要清屏的填充色
1129          void LCD_Clear(u16 color)
1130          {
1131   1        u16 i=0, j=0 ;
1132   1      
1133   1        LCD_Set_Window(0, 0, tftlcd_data.width-1, tftlcd_data.height-1);   //作用区域
1134   1          for(i=0; i<tftlcd_data.width; i++)
1135   1        {
1136   2          for (j=0; j<tftlcd_data.height; j++)
1137   2          {
1138   3            LCD_WriteData_Color(color);
1139   3          }
1140   2        } 
1141   1      }
1142          
1143          //在指定区域内填充单个颜色
1144          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
1145          //color:要填充的颜色
1146          //void LCD_Fill(u16 xState,u16 yState,u16 xEnd,u16 yEnd,u16 color)
1147          //{          
1148          //  u16 temp=0;
1149          
1150          //    if((xState > xEnd) || (yState > yEnd))
1151          //    {
1152          //        return;
1153          //    }   
1154          //  LCD_Set_Window(xState, yState, xEnd, yEnd); 
1155          //    xState = xEnd - xState + 1;
1156          //  yState = yEnd - yState + 1;
1157          
1158          //  while(xState--)
1159          //  {
1160          //    temp = yState;
1161          //    while (temp--)
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 20  

1162          //    {     
1163          //      LCD_WriteData_Color(color); 
1164          //    }
1165          //  } 
1166          //} 
1167          
1168          //在指定区域内填充指定颜色块       
1169          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
1170          //color:要填充的颜色
1171          //void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
1172          //{  
1173          //  u16 height,width;
1174          //  u16 i,j;
1175          //  width=ex-sx+1;      //得到填充的宽度
1176          //  height=ey-sy+1;     //高度
1177          //  LCD_Set_Window(sx, sy,ex, ey);
1178          //  for(i=0;i<height;i++)
1179          //  {
1180          //    for(j=0;j<width;j++)
1181          //    {
1182          //      LCD_WriteData_Color(color[i*width+j]);
1183          //    }
1184          //  }       
1185          //}
1186          
1187          //画点
1188          //x,y:坐标
1189          //FRONT_COLOR:此点的颜色
1190          //void LCD_DrawPoint(u16 x,u16 y)
1191          //{
1192          //  LCD_Set_Window(x, y, x, y);  //设置点的位置
1193          //  LCD_WriteData_Color(FRONT_COLOR); 
1194          //}
1195          
1196          //快速画点
1197          //x,y:坐标
1198          //color:颜色
1199          //void LCD_DrawFRONT_COLOR(u16 x,u16 y,u16 color)
1200          //{    
1201          //  LCD_Set_Window(x, y, x, y);
1202          //  LCD_WriteData_Color(color); 
1203          //} 
1204          
1205          //画一个大点
1206          //2*2的点        
1207          //void LCD_DrawBigPoint(u16 x,u16 y,u16 color)
1208          //{     
1209          //  LCD_DrawFRONT_COLOR(x,y,color);//中心点 
1210          //  LCD_DrawFRONT_COLOR(x+1,y,color);
1211          //  LCD_DrawFRONT_COLOR(x,y+1,color);
1212          //  LCD_DrawFRONT_COLOR(x+1,y+1,color);       
1213          //}
1214          
1215          //画线
1216          //x1,y1:起点坐标
1217          //x2,y2:终点坐标  
1218          //void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
1219          //{
1220          //  u16 t=0; 
1221          //  int xerr=0,yerr=0,delta_x,delta_y,distance; 
1222          //  int incx,incy,uRow,uCol; 
1223          //  delta_x=x2-x1; //计算坐标增量 
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 21  

1224          //  delta_y=y2-y1; 
1225          //  uRow=x1; 
1226          //  uCol=y1; 
1227          //  if(delta_x>0)incx=1; //设置单步方向 
1228          //  else if(delta_x==0)incx=0;//垂直线 
1229          //  else {incx=-1;delta_x=-delta_x;} 
1230          //  if(delta_y>0)incy=1; 
1231          //  else if(delta_y==0)incy=0;//水平线 
1232          //  else{incy=-1;delta_y=-delta_y;} 
1233          //  if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1234          //  else distance=delta_y; 
1235          //  for(t=0;t<=distance+1;t++ )//画线输出 
1236          //  {  
1237          //    LCD_DrawPoint(uRow,uCol);//画点 
1238          //    xerr+=delta_x ; 
1239          //    yerr+=delta_y ; 
1240          //    if(xerr>distance) 
1241          //    { 
1242          //      xerr-=distance; 
1243          //      uRow+=incx; 
1244          //    } 
1245          //    if(yerr>distance) 
1246          //    { 
1247          //      yerr-=distance; 
1248          //      uCol+=incy; 
1249          //    } 
1250          //  }  
1251          //} 
1252          
1253          //void LCD_DrawLine_Color(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
1254          //{
1255          //  u16 t; 
1256          //  int xerr=0,yerr=0,delta_x,delta_y,distance; 
1257          //  int incx,incy,uRow,uCol; 
1258          //  delta_x=x2-x1; //计算坐标增量 
1259          //  delta_y=y2-y1; 
1260          //  uRow=x1; 
1261          //  uCol=y1; 
1262          //  if(delta_x>0)incx=1; //设置单步方向 
1263          //  else if(delta_x==0)incx=0;//垂直线 
1264          //  else {incx=-1;delta_x=-delta_x;} 
1265          //  if(delta_y>0)incy=1; 
1266          //  else if(delta_y==0)incy=0;//水平线 
1267          //  else{incy=-1;delta_y=-delta_y;} 
1268          //  if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1269          //  else distance=delta_y; 
1270          //  for(t=0;t<=distance+1;t++ )//画线输出 
1271          //  {  
1272          //    LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
1273          //    xerr+=delta_x ; 
1274          //    yerr+=delta_y ; 
1275          //    if(xerr>distance) 
1276          //    { 
1277          //      xerr-=distance; 
1278          //      uRow+=incx; 
1279          //    } 
1280          //    if(yerr>distance) 
1281          //    { 
1282          //      yerr-=distance; 
1283          //      uCol+=incy; 
1284          //    } 
1285          //  }  
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 22  

1286          //} 
1287          
1288          
1289          // 画一个十字的标记
1290          // x：标记的X坐标
1291          // y：标记的Y坐标
1292          // color：标记的颜色
1293          
1294          //画矩形    
1295          //(x1,y1),(x2,y2):矩形的对角坐标
1296          /*void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
1297          {
1298            LCD_DrawLine(x1,y1,x2,y1);
1299            LCD_DrawLine(x1,y1,x1,y2);
1300            LCD_DrawLine(x1,y2,x2,y2);
1301            LCD_DrawLine(x2,y1,x2,y2);
1302          }*/
1303          //在指定位置画一个指定大小的圆
1304          //(x,y):中心点
1305          //r    :半径
1306          /*void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
1307          {
1308            int a,b;
1309            int di;
1310            a=0;b=r;    
1311            di=3-(r<<1);             //判断下个点位置的标志
1312            while(a<=b)
1313            {
1314              LCD_DrawPoint(x0+a,y0-b);             //5
1315              LCD_DrawPoint(x0+b,y0-a);             //0           
1316              LCD_DrawPoint(x0+b,y0+a);             //4               
1317              LCD_DrawPoint(x0+a,y0+b);             //6 
1318              LCD_DrawPoint(x0-a,y0+b);             //1       
1319              LCD_DrawPoint(x0-b,y0+a);             
1320              LCD_DrawPoint(x0-a,y0-b);             //2             
1321                LCD_DrawPoint(x0-b,y0-a);             //7                
1322              a++;
1323              //使用Bresenham算法画圆     
1324              if(di<0)di +=4*a+6;   
1325              else
1326              {
1327                di+=10+4*(a-b);   
1328                b--;
1329              }                 
1330            }
1331          } */
1332          
1333          
1334          //在指定位置显示一个字符
1335          //x,y:起始坐标
1336          //num:要显示的字符:" "--->"~"
1337          //size:字体大小 12/16/24
1338          //mode:叠加方式(1)还是非叠加方式(0)
1339          /*void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
1340          {                 
1341              u8 temp,t1,t;
1342            u16 y0=y;
1343            u8 csize=(size/8+((size%8)?1:0))*(size/2);    //得到字体一个字符对应点阵集所占的字节数  
1344            num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
1345            for(t=0;t<csize;t++)
1346            {   
1347              if(size==12)temp=ascii_1206[num][t];    //调用1206字体
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 23  

1348              else if(size==16)temp=ascii_1608[num][t]; //调用1608字体
1349              else if(size==24)temp=ascii_2412[num][t]; //调用2412字体
1350              else return;                //没有的字库
1351              for(t1=0;t1<8;t1++)
1352              {         
1353                if(temp&0x80)LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
1354                else if(mode==0)LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
1355                temp<<=1;
1356                y++;
1357                if(y>=tftlcd_data.height)return;    //超区域了
1358                if((y-y0)==size)
1359                {
1360                  y=y0;
1361                  x++;
1362                  if(x>=tftlcd_data.width)return; //超区域了
1363                  break;
1364                }
1365              }    
1366            }                 
1367          }   */
1368          //m^n函数
1369          //返回值:m^n次方.
1370          //u32 LCD_Pow(u8 m,u8 n)
1371          //{
1372          //  u32 result=1;  
1373          //  while(n--)result*=m;    
1374          //  return result;
1375          //}      
1376          //显示数字,高位为0,则不显示
1377          //x,y :起点坐标  
1378          //len :数字的位数
1379          //size:字体大小
1380          //color:颜色 
1381          //num:数值(0~4294967295);  
1382          /*void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
1383          {           
1384            u8 t,temp;
1385            u8 enshow=0;               
1386            for(t=0;t<len;t++)
1387            {
1388              temp=(num/LCD_Pow(10,len-t-1))%10;
1389              if(enshow==0&&t<(len-1))
1390              {
1391                if(temp==0)
1392                {
1393                  LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
1394                  continue;
1395                }else enshow=1; 
1396                 
1397              }
1398              LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0); 
1399            }
1400          } */
1401          
1402          //显示数字,高位为0,还是显示
1403          //x,y:起点坐标
1404          //num:数值(0~999999999);   
1405          //len:长度(即要显示的位数)
1406          //size:字体大小
1407          //mode:
1408          //[7]:0,不填充;1,填充0.
1409          //[6:1]:保留
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 24  

1410          //[0]:0,非叠加显示;1,叠加显示.
1411          /*void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
1412          {  
1413            u8 t,temp;
1414            u8 enshow=0;               
1415            for(t=0;t<len;t++)
1416            {
1417              temp=(num/LCD_Pow(10,len-t-1))%10;
1418              if(enshow==0&&t<(len-1))
1419              {
1420                if(temp==0)
1421                {
1422                  if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);  
1423                  else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);  
1424                  continue;
1425                }else enshow=1; 
1426                 
1427              }
1428              LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01); 
1429            }
1430          } */
1431          //显示字符串
1432          //x,y:起点坐标
1433          //width,height:区域大小  
1434          //size:字体大小
1435          //*p:字符串起始地址     
1436          /*void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
1437          {         
1438            u8 x0=x;
1439            width+=x;
1440            height+=y;
1441              while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
1442              {       
1443                  if(x>=width){x=x0;y+=size;}
1444                  if(y>=height)break;//退出
1445                  LCD_ShowChar(x,y,*p,size,0);
1446                  x+=size/2;
1447                  p++;
1448              }  
1449          }*/
1450          
1451          /****************************************************************************
1452          *函数名：LCD_ShowFontHZ
1453          *输  入：x：汉字显示的X坐标
1454          *      * y：汉字显示的Y坐标
1455          *      * cn：要显示的汉字
1456          *      * wordColor：文字的颜色
1457          *      * backColor：背景颜色
1458          *输  出：
1459          *功  能：写二号楷体汉字
1460          ****************************************************************************/
1461          #if 1
1462          void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)  
1463          {  
1464   1        u8 i, j, wordNum;
1465   1        u16 color;
1466   1        while (*cn != '\0')
1467   1        {
1468   2          LCD_Set_Window(x, y, x+31, y+28);
1469   2          for (wordNum=0; wordNum<20; wordNum++)
1470   2          { //wordNum扫描字库的字数
1471   3            if ((CnChar32x29[wordNum].Index[0]==*cn)
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 25  

1472   3                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
1473   3            {
1474   4              
1475   4              for(i=0; i<116; i++) 
1476   4              { //MSK的位数
1477   5                color=CnChar32x29[wordNum].Msk[i];
1478   5                for(j=0;j<8;j++) 
1479   5                {
1480   6                  if((color&0x80)==0x80)
1481   6                  {
1482   7                    LCD_WriteData_Color(FRONT_COLOR);             
1483   7                  }             
1484   6                  else
1485   6                  {
1486   7                    LCD_WriteData_Color(BACK_COLOR); 
1487   7                  } 
1488   6                  color<<=1;
1489   6                }//for(j=0;j<8;j++)结束
1490   5              }    
1491   4            }
1492   3          } //for (wordNum=0; wordNum<20; wordNum++)结束  
1493   2          cn += 2;
1494   2          x += 32;
1495   2        }
1496   1      }
1497          #endif
1498          
1499          
1500          #if 0
              void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)
              {
                u8 i, j, wordNum;
                u16 color;
                u16 x0=x; 
                u16 y0=y; 
                while (*cn != '\0')
                {
                  for (wordNum=0; wordNum<20; wordNum++)
                  { //wordNum扫描字库的字数
                    if ((CnChar32x29[wordNum].Index[0]==*cn)
                         &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
                    {
                      for(i=0; i<116; i++) 
                      { //MSK的位数
                        color=CnChar32x29[wordNum].Msk[i];
                        for(j=0;j<8;j++) 
                        {
                          if((color&0x80)==0x80)
                          {
                            LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
                          }             
                          else
                          {
                            LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
                          } 
                          color<<=1;
                          x++;
                          if((x-x0)==32)
                          {
                            x=x0;
                            y++;
                            if((y-y0)==29)
C51 COMPILER V9.60.0.0   TFTLCD                                                            12/08/2020 22:18:14 PAGE 26  

                            {
                              y=y0;
                            }
                          }
                        }//for(j=0;j<8;j++)结束
                      } 
                    }
                    
                  } //for (wordNum=0; wordNum<20; wordNum++)结束  
                  cn += 2;
                  x += 32;
                  x0=x;
                }
              } 
              #endif
1549          
1550          /*void LCD_ShowPicture(u16 x, u16 y, u16 wide, u16 high,u8 *pic)
1551          {
1552            u16 temp = 0;
1553            long tmp=0,num=0;
1554            LCD_Set_Window(x, y, x+wide-1, y+high-1);
1555            num = wide * high*2 ;
1556            do
1557            {  
1558              temp = pic[tmp + 1];
1559              temp = temp << 8;
1560              temp = temp | pic[tmp];
1561              LCD_WriteData_Color(temp);//逐点显示
1562              tmp += 2;
1563            }
1564            while(tmp < num); 
1565          }*/
1566          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1452    ----
   CONSTANT SIZE    =   1298    ----
   XDATA SIZE       =     11      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
